{"remainingRequest":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@ng-idle\\core\\src\\idleexpiry.js","dependencies":[{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@ng-idle\\core\\src\\idleexpiry.js","mtime":1518154215914},{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["/*\r\n * Represents a base class for types that provide expiry detection for the Idle service.\r\n */\r\nvar IdleExpiry = /*@__PURE__*/ (function () {\r\n    function IdleExpiry() {\r\n        this.idValue = new Date();\r\n        this.idlingValue = false;\r\n    }\r\n    /*\r\n     * Gets or sets a unique ID for the window\r\n     * @param id - The id.\r\n     * @return The current id.\r\n     */\r\n    IdleExpiry.prototype.id = function (value) {\r\n        if (value !== void 0) {\r\n            if (!value) {\r\n                throw new Error('A value must be specified for the ID.');\r\n            }\r\n            this.idValue = value;\r\n        }\r\n        return this.idValue;\r\n    };\r\n    /*\r\n     * Gets or sets the idling value.\r\n     * @param value - The value to set.\r\n     * @return The idling value.\r\n     */\r\n    IdleExpiry.prototype.idling = function (value) {\r\n        if (value !== void 0) {\r\n            this.idlingValue = value;\r\n        }\r\n        return this.idlingValue;\r\n    };\r\n    /*\r\n     * Returns the current Date.\r\n     * @return The current Date.\r\n     */\r\n    IdleExpiry.prototype.now = function () {\r\n        return new Date();\r\n    };\r\n    /*\r\n     * Returns whether or not it is expired.\r\n     * @return True if expired; otherwise, false.\r\n     */\r\n    IdleExpiry.prototype.isExpired = function () {\r\n        var expiry = this.last();\r\n        return expiry != null && expiry <= this.now();\r\n    };\r\n    return IdleExpiry;\r\n}());\r\nexport { IdleExpiry };\r\n//# sourceMappingURL=idleexpiry.js.map \r\n",null]}