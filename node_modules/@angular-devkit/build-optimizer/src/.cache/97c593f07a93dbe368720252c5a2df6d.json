{"remainingRequest":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@ng-idle\\core\\src\\localstorage.js","dependencies":[{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@ng-idle\\core\\src\\localstorage.js","mtime":1518154216022},{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import { Injectable } from '@angular/core';\nimport { AlternativeStorage } from './alternativestorage';\n/*\n * Represents a localStorage store.\n */\nvar LocalStorage = /*@__PURE__*/ (function () {\n    function LocalStorage() {\n        this.storage = this.getStorage();\n    }\n    /*\n     * Safari, in Private Browsing Mode, looks like it supports localStorage but all calls to setItem\n     * throw QuotaExceededError. We're going to detect this and just silently drop any calls to\n     * setItem\n     * to avoid the entire page breaking, without having to do a check at each usage of Storage.\n     */\n    LocalStorage.prototype.getStorage = function () {\n        try {\n            var storage = localStorage;\n            storage.setItem('ng2IdleStorage', '');\n            storage.removeItem('ng2IdleStorage');\n            return storage;\n        }\n        catch (err) {\n            return new AlternativeStorage();\n        }\n    };\n    /*\n     * Gets an item in the storage.\n     *\n     * @param value - The value to get.\n     * @return The current value.\n     */\n    LocalStorage.prototype.getItem = function (key) {\n        return this.storage.getItem('ng2Idle.' + key);\n    };\n    /*\n     * Removes an item in the storage.\n     *\n     * @param value - The value to remove.\n     */\n    LocalStorage.prototype.removeItem = function (key) {\n        this.storage.removeItem('ng2Idle.' + key);\n    };\n    /*\n     * Sets an item in the storage.\n     *\n     * @param key - The key to set the value.\n     * @param value - The value to set to the key.\n     */\n    LocalStorage.prototype.setItem = function (key, data) {\n        this.storage.setItem('ng2Idle.' + key, data);\n    };\n    /*\n     * Represents the storage, commonly use for testing purposes.\n     *\n     * @param key - The key to set the value.\n     * @param value - The value to set to the key.\n     */\n    LocalStorage.prototype._wrapped = function () {\n        return this.storage;\n    };\n    return LocalStorage;\n}());\nexport { LocalStorage };\n//# sourceMappingURL=localstorage.js.map \n",null]}