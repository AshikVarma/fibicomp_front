{"remainingRequest":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\elasticsearch\\src\\lib\\nodes_to_host.js","dependencies":[{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\elasticsearch\\src\\lib\\nodes_to_host.js","mtime":1518154263748},{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["var _ = require('./utils');\n\nvar extractHostPartsRE1x = /\\[(?:(.*)\\/)?(.+?):(\\d+)\\]/;\n\nfunction makeNodeParser(hostProp) {\n  return function (nodes) {\n    return _.transform(nodes, function (hosts, node, id) {\n      var address = _.get(node, hostProp)\n      if (!address) return;\n\n      var host = {\n        host: undefined,\n        port: undefined,\n        _meta: {\n          id: id,\n          name: node.name,\n          version: node.version\n        }\n      };\n\n      var malformedError = new Error(\n        'Malformed ' + hostProp + '.' +\n        ' Got ' + JSON.stringify(address) +\n        ' and expected it to match \"{hostname?}/{ip}:{port}\".'\n      );\n\n      var matches1x = extractHostPartsRE1x.exec(address);\n      if (matches1x) {\n        host.host = matches1x[1] || matches1x[2];\n        host.port = parseInt(matches1x[3], 10);\n        hosts.push(host);\n        return;\n      }\n\n      if (address.indexOf('/') > -1) {\n        var withHostParts = address.split('/');\n        if (withHostParts.length !== 2) throw malformedError;\n\n        host.host = withHostParts.shift();\n        address = withHostParts.shift();\n      }\n\n      if (address.indexOf(':') < 0) {\n        throw malformedError;\n      }\n\n      var addressParts = address.split(':');\n      if (addressParts.length !== 2) {\n        throw malformedError;\n      }\n\n      host.host = host.host || addressParts[0];\n      host.port = parseInt(addressParts[1], 10);\n      hosts.push(host);\n    }, []);\n  };\n}\n\nmodule.exports = makeNodeParser('http.publish_address');\n",null]}