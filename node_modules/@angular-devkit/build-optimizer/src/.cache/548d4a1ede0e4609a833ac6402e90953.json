{"remainingRequest":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\elasticsearch\\src\\lib\\connectors\\angular.js","dependencies":[{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\elasticsearch\\src\\lib\\connectors\\angular.js","mtime":1518154263579},{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["/**\n * Connection that registers a module with angular, using angular's $http service\n * to communicate with ES.\n *\n * @class connections.Angular\n */\nmodule.exports = AngularConnector;\n\nvar _ = require('../utils');\nvar ConnectionAbstract = require('../connection');\nvar ConnectionFault = require('../errors').ConnectionFault;\n\nfunction AngularConnector(host, config) {\n  ConnectionAbstract.call(this, host, config);\n\n  var self = this;\n  config.$injector.invoke(['$http', '$q', function ($http, $q) {\n    self.$q = $q;\n    self.$http = $http;\n  }]);\n\n}\n_.inherits(AngularConnector, ConnectionAbstract);\n\nAngularConnector.prototype.request = function (params, cb) {\n  var abort = this.$q.defer();\n\n  this.$http({\n    method: params.method,\n    url: this.host.makeUrl(params),\n    data: params.body,\n    cache: false,\n    headers: this.host.getHeaders(params.headers),\n    transformRequest: [],\n    transformResponse: [],\n    // not actually for timing out, that's handled by the transport\n    timeout: abort.promise\n  }).then(function (response) {\n    cb(null, response.data, response.status, response.headers());\n  }, function (err) {\n    if (err.status) {\n      cb(null, err.data, err.status, err.headers());\n    } else {\n      cb(new ConnectionFault(err.message));\n    }\n  });\n\n  return function () {\n    abort.resolve();\n  };\n};\n",null]}