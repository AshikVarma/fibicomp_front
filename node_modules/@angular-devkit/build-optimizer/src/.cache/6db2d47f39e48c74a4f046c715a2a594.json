{"remainingRequest":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\elasticsearch\\src\\lib\\connectors\\xhr.js","dependencies":[{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\elasticsearch\\src\\lib\\connectors\\xhr.js","mtime":1518154263623},{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["/**\n * Generic Transport for the browser, using the XmlHttpRequest object\n *\n * @class  connections.Xhr\n */\nmodule.exports = XhrConnector;\n\n/* jshint browser:true */\n\nvar _ = require('../utils');\nvar ConnectionAbstract = require('../connection');\nvar ConnectionFault = require('../errors').ConnectionFault;\nvar asyncDefault = !(navigator && /PhantomJS/i.test(navigator.userAgent));\n\nfunction XhrConnector(host, config) {\n  ConnectionAbstract.call(this, host, config);\n}\n_.inherits(XhrConnector, ConnectionAbstract);\n\n/**\n * Simply returns an XHR object cross browser\n * @type {Function}\n */\nvar getXhr = _.noop;\n\nif (typeof XMLHttpRequest !== 'undefined') {\n  // rewrite the getXhr method to always return the native implementation\n  getXhr = function () {\n    return new XMLHttpRequest();\n  };\n} else {\n  // find the first MS implementation available\n  getXhr = _(['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'])\n  .map(function (appName) {\n    /* jshint unused: false */\n    try {\n      var test = new window.ActiveXObject(appName); // eslint-disable-line no-unused-vars\n      return function () {\n        return new window.ActiveXObject(appName);\n      };\n    } catch (e) {\n      return false;\n    }\n  })\n  .compact()\n  .first();\n}\n\nif (!getXhr) {\n  throw new Error('getXhr(): XMLHttpRequest not available');\n}\n\nXhrConnector.prototype.request = function (params, cb) {\n  var xhr = getXhr();\n  var timeoutId;\n  var host = this.host;\n  var log = this.log;\n\n  var url = host.makeUrl(params);\n  var headers = host.getHeaders(params.headers);\n  var async = params.async === false ? false : asyncDefault;\n\n  xhr.open(params.method || 'GET', url, async);\n\n  if (headers) {\n    for (var key in headers) {\n      if (headers[key] !== void 0) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4) {\n      clearTimeout(timeoutId);\n      log.trace(params.method, url, params.body, xhr.responseText, xhr.status);\n      var err = xhr.status ? void 0 : new ConnectionFault(xhr.statusText || 'Request failed to complete.');\n      cb(err, xhr.responseText, xhr.status);\n    }\n  };\n\n  xhr.send(params.body || void 0);\n\n  return function () {\n    xhr.abort();\n  };\n};\n",null]}