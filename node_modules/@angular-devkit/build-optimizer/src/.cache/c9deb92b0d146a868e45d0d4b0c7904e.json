{"remainingRequest":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@ng-idle\\core\\src\\localstorageexpiry.js","dependencies":[{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@ng-idle\\core\\src\\localstorageexpiry.js","mtime":1518154216048},{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IdleExpiry } from './idleexpiry';\nimport { LocalStorage } from './localstorage';\n/*\n * Represents a localStorage store of expiry values.\n * @extends IdleExpiry\n */\nvar LocalStorageExpiry = /*@__PURE__*/ (function (_super) {\n    __extends(LocalStorageExpiry, _super);\n    function LocalStorageExpiry(localStorage) {\n        var _this = _super.call(this) || this;\n        _this.localStorage = localStorage;\n        _this.idleName = 'main';\n        return _this;\n    }\n    /*\n     * Gets or sets the last expiry date in localStorage.\n     * If localStorage doesn't work correctly (i.e. Safari in private mode), we store the expiry value in memory.\n     * @param value - The expiry value to set; omit to only return the value.\n     * @return The current expiry value.\n     */\n    LocalStorageExpiry.prototype.last = function (value) {\n        if (value !== void 0) {\n            this.setExpiry(value);\n        }\n        return this.getExpiry();\n    };\n    LocalStorageExpiry.prototype.idling = function (value) {\n        if (value !== void 0) {\n            this.setIdling(value);\n        }\n        return this.getIdling();\n    };\n    /*\n     * Gets the idle name.\n     * @return The name of the idle.\n     */\n    LocalStorageExpiry.prototype.getIdleName = function () {\n        return this.idleName;\n    };\n    /*\n     * Sets the idle name.\n     * @param The name of the idle.\n     */\n    LocalStorageExpiry.prototype.setIdleName = function (key) {\n        if (key) {\n            this.idleName = key;\n        }\n    };\n    LocalStorageExpiry.prototype.getExpiry = function () {\n        var expiry = this.localStorage.getItem(this.idleName + '.expiry');\n        if (expiry) {\n            return new Date(parseInt(expiry, 10));\n        }\n        else {\n            return null;\n        }\n    };\n    LocalStorageExpiry.prototype.setExpiry = function (value) {\n        if (value) {\n            this.localStorage.setItem(this.idleName + '.expiry', value.getTime().toString());\n        }\n        else {\n            this.localStorage.removeItem(this.idleName + '.expiry');\n        }\n    };\n    LocalStorageExpiry.prototype.getIdling = function () {\n        var idling = this.localStorage.getItem(this.idleName + '.idling');\n        if (idling) {\n            return idling === 'true';\n        }\n        else {\n            return false;\n        }\n    };\n    LocalStorageExpiry.prototype.setIdling = function (value) {\n        if (value) {\n            this.localStorage.setItem(this.idleName + '.idling', value.toString());\n        }\n        else {\n            this.localStorage.setItem(this.idleName + '.idling', 'false');\n        }\n    };\n    return LocalStorageExpiry;\n}(IdleExpiry));\nexport { LocalStorageExpiry };\n//# sourceMappingURL=localstorageexpiry.js.map \n",null]}