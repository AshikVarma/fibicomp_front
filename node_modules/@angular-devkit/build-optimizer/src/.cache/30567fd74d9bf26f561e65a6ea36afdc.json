{"remainingRequest":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@ng-idle\\core\\src\\alternativestorage.js","dependencies":[{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@ng-idle\\core\\src\\alternativestorage.js","mtime":1518154215808},{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["/*\r\n * Represents an alternative storage for browser that doesn't support localstorage. (i.e. Safari in\r\n * private mode)\r\n * @implements Storage\r\n */\r\nvar AlternativeStorage = /*@__PURE__*/ (function () {\r\n    function AlternativeStorage() {\r\n        this.storageMap = {};\r\n    }\r\n    Object.defineProperty(AlternativeStorage.prototype, \"length\", {\r\n        /*\r\n         * Returns an integer representing the number of data items stored in the storageMap object.\r\n         */\r\n        get: function () {\r\n            return Object.keys(this.storageMap).length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /*\r\n     * Remove all keys out of the storage.\r\n     */\r\n    AlternativeStorage.prototype.clear = function () {\r\n        this.storageMap = {};\r\n    };\r\n    /*\r\n     * Return the key's value\r\n     *\r\n     * @param key - name of the key to retrieve the value of.\r\n     * @return The key's value\r\n     */\r\n    AlternativeStorage.prototype.getItem = function (key) {\r\n        if (typeof this.storageMap[key] !== 'undefined') {\r\n            return this.storageMap[key];\r\n        }\r\n        return null;\r\n    };\r\n    /*\r\n     * Return the nth key in the storage\r\n     *\r\n     * @param index - the number of the key you want to get the name of.\r\n     * @return The name of the key.\r\n     */\r\n    AlternativeStorage.prototype.key = function (index) {\r\n        return Object.keys(this.storageMap)[index] || null;\r\n    };\r\n    /*\r\n     * Remove a key from the storage.\r\n     *\r\n     * @param key - the name of the key you want to remove.\r\n     */\r\n    AlternativeStorage.prototype.removeItem = function (key) {\r\n        this.storageMap[key] = undefined;\r\n    };\r\n    /*\r\n     * Add a key to the storage, or update a key's value if it already exists.\r\n     *\r\n     * @param key - the name of the key.\r\n     * @param value - the value you want to give to the key.\r\n     */\r\n    AlternativeStorage.prototype.setItem = function (key, value) {\r\n        this.storageMap[key] = value;\r\n    };\r\n    return AlternativeStorage;\r\n}());\r\nexport { AlternativeStorage };\r\n//# sourceMappingURL=alternativestorage.js.map \r\n",null]}