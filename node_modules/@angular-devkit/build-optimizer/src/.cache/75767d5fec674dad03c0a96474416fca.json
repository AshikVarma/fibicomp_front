{"remainingRequest":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@ng-idle\\core\\src\\interrupt.js","dependencies":[{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@ng-idle\\core\\src\\interrupt.js","mtime":1518154215936},{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["/*\r\n * A class for managing an interrupt from an interrupt source.\r\n */\r\nvar Interrupt = /*@__PURE__*/ (function () {\r\n    function Interrupt(source) {\r\n        this.source = source;\r\n    }\r\n    /*\r\n     * Subscribes to the interrupt using the specified function.\r\n     * @param fn - The subscription function.\r\n     */\r\n    Interrupt.prototype.subscribe = function (fn) {\r\n        this.sub = this.source.onInterrupt.subscribe(fn);\r\n    };\r\n    /*\r\n     * Unsubscribes the interrupt.\r\n     */\r\n    Interrupt.prototype.unsubscribe = function () {\r\n        this.sub.unsubscribe();\r\n        this.sub = null;\r\n    };\r\n    /*\r\n     * Keeps the subscription but resumes interrupt events.\r\n     */\r\n    Interrupt.prototype.resume = function () {\r\n        this.source.attach();\r\n    };\r\n    /*\r\n     * Keeps the subscription but pauses interrupt events.\r\n     */\r\n    Interrupt.prototype.pause = function () {\r\n        this.source.detach();\r\n    };\r\n    return Interrupt;\r\n}());\r\nexport { Interrupt };\r\n//# sourceMappingURL=interrupt.js.map \r\n",null]}