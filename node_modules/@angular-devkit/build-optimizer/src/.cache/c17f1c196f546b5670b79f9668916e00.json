{"remainingRequest":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\elasticsearch\\src\\lib\\errors.js","dependencies":[{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\elasticsearch\\src\\lib\\errors.js","mtime":1518154263636},{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"D:\\fibicomp-frontend\\fibicomp_front\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["var _ = require('./utils');\nvar errors = module.exports;\n\nvar canCapture = (typeof Error.captureStackTrace === 'function');\nvar canStack = !!(new Error()).stack;\n\nfunction ErrorAbstract(msg, constructor, metadata) {\n  this.message = msg;\n\n  Error.call(this, this.message);\n\n  if (canCapture) {\n    Error.captureStackTrace(this, constructor);\n  }\n  else if (canStack) {\n    this.stack = (new Error()).stack;\n  }\n  else {\n    this.stack = '';\n  }\n\n  if (metadata) {\n    _.assign(this, metadata);\n\n    this.toString = function () {\n      return msg + ' :: ' + JSON.stringify(metadata);\n    };\n\n    this.toJSON = function () {\n      return _.assign({\n        msg: msg\n      }, metadata);\n    };\n  }\n}\nerrors._Abstract = ErrorAbstract;\n_.inherits(ErrorAbstract, Error);\n\n/**\n * Connection Error\n * @param {String} [msg] - An error message that will probably end up in a log.\n */\nerrors.ConnectionFault = function ConnectionFault(msg) {\n  ErrorAbstract.call(this, msg || 'Connection Failure', errors.ConnectionFault);\n};\n_.inherits(errors.ConnectionFault, ErrorAbstract);\n\n/**\n * No Living Connections\n * @param {String} [msg] - An error message that will probably end up in a log.\n */\nerrors.NoConnections = function NoConnections(msg) {\n  ErrorAbstract.call(this, msg || 'No Living connections', errors.NoConnections);\n};\n_.inherits(errors.NoConnections, ErrorAbstract);\n\n/**\n * Generic Error\n * @param {String} [msg] - An error message that will probably end up in a log.\n */\nerrors.Generic = function Generic(msg, metadata) {\n  ErrorAbstract.call(this, msg || 'Generic Error', errors.Generic, metadata);\n};\n_.inherits(errors.Generic, ErrorAbstract);\n\n/**\n * Request Timeout Error\n * @param {String} [msg] - An error message that will probably end up in a log.\n */\nerrors.RequestTimeout = function RequestTimeout(msg) {\n  ErrorAbstract.call(this, msg || 'Request Timeout', errors.RequestTimeout);\n};\n_.inherits(errors.RequestTimeout, ErrorAbstract);\n\n\n/**\n * Request Body could not be parsed\n * @param {String} [msg] - An error message that will probably end up in a log.\n */\nerrors.Serialization = function Serialization(msg) {\n  ErrorAbstract.call(this, msg || 'Unable to parse/serialize body', errors.Serialization);\n};\n_.inherits(errors.Serialization, ErrorAbstract);\n\n\n/**\n * Thrown when a browser compatability issue is detected (cough, IE, cough)\n */\nerrors.RequestTypeError = function RequestTypeError(feature) {\n  ErrorAbstract.call(this, 'Cross-domain AJAX requests ' + feature + ' are not supported', errors.RequestTypeError);\n};\n_.inherits(errors.RequestTypeError, ErrorAbstract);\n\nvar statusCodes = [\n  [300, 'Multiple Choices'],\n  [301, 'Moved Permanently'],\n  [302, 'Found'],\n  [303, 'See Other'],\n  [304, 'Not Modified'],\n  [305, 'Use Proxy'],\n  [307, 'Temporary Redirect'],\n  [308, 'Permanent Redirect'],\n  [400, 'Bad Request'],\n  [401, 'Authentication Exception'],\n  [402, 'Payment Required'],\n  [403, ['Authorization Exception', 'Forbidden']],\n  [404, 'Not Found'],\n  [405, 'Method Not Allowed'],\n  [406, 'Not Acceptable'],\n  [407, 'Proxy Authentication Required'],\n  [408, 'Request Timeout'],\n  [409, 'Conflict'],\n  [410, 'Gone'],\n  [411, 'Length Required'],\n  [412, 'Precondition Failed'],\n  [413, 'Request Entity Too Large'],\n  [414, 'Request URIToo Long'],\n  [415, 'Unsupported Media Type'],\n  [416, 'Requested Range Not Satisfiable'],\n  [417, 'Expectation Failed'],\n  [418, 'Im ATeapot'],\n  [421, 'Too Many Connections From This IP'],\n  [426, 'Upgrade Required'],\n  [429, 'Too Many Requests'],\n  [450, 'Blocked By Windows Parental Controls'],\n  [494, 'Request Header Too Large'],\n  [497, 'HTTPTo HTTPS'],\n  [499, 'Client Closed Request'],\n  [500, 'Internal Server Error'],\n  [501, 'Not Implemented'],\n  [502, 'Bad Gateway'],\n  [503, 'Service Unavailable'],\n  [504, 'Gateway Timeout'],\n  [505, 'HTTPVersion Not Supported'],\n  [506, 'Variant Also Negotiates'],\n  [510, 'Not Extended']\n];\n\n_.each(statusCodes, function createStatusCodeError(tuple) {\n  var status = tuple[0];\n  var names = tuple[1];\n  var allNames = [].concat(names, status);\n  var primaryName = allNames[0];\n  var className = _.studlyCase(primaryName);\n  allNames = _.uniq(allNames.concat(className));\n\n  function StatusCodeError(msg, metadata) {\n    this.status = status;\n    this.displayName = className;\n\n    var esErrObject = null;\n    if (_.isPlainObject(msg)) {\n      esErrObject = msg;\n      msg = null;\n    }\n\n    if (!esErrObject) {\n      // errors from es now come in two forms, an error string < 2.0 and\n      // an object >= 2.0\n      // TODO: remove after dropping support for < 2.0\n      ErrorAbstract.call(this, msg || primaryName, StatusCodeError, metadata);\n      return this;\n    }\n\n    msg = [].concat(esErrObject.root_cause || []).reduce(function (memo, cause) {\n      if (memo) memo += ' (and) ';\n\n      memo += '[' + cause.type + '] ' + cause.reason;\n\n      var extraData = _.omit(cause, ['type', 'reason']);\n      if (_.size(extraData)) {\n        memo += ', with ' + prettyPrint(extraData);\n      }\n\n      return memo;\n    }, '');\n\n    if (!msg) {\n      if (esErrObject.type) msg += '[' + esErrObject.type + '] ';\n      if (esErrObject.reason) msg += esErrObject.reason;\n    }\n\n    ErrorAbstract.call(this, msg || primaryName, StatusCodeError, metadata);\n    return this;\n  }\n  _.inherits(StatusCodeError, ErrorAbstract);\n\n  allNames.forEach(function (name) {\n    errors[name] = StatusCodeError;\n  });\n});\n\n\nfunction prettyPrint(data) {\n  const path = []\n  return (function print(v) {\n    if (typeof v === 'object') {\n      if (path.indexOf(v) > -1) return '[circular]'\n      path.push(v)\n      try {\n        return '{ ' + _.map(v, function (subv, name) {\n          return name + '=' + print(subv)\n        }).join(' & ') + ' }'\n      } finally {\n        path.pop()\n      }\n    } else {\n      return JSON.stringify(v)\n    }\n  }(data))\n}\n",null]}